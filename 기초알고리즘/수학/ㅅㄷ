#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define INPUT "INPUT.txt"
#define OUTPUT "OUTPUT.txt"

// 1은 소수가 아니기때문에 따로 처리
//int not_prime_nums[MAX_SIZE + 5] = { 0,1,0, };
void getPrimeArray(int n);
//int m_sqrt(int n);

int main(void) {
    freopen(INPUT, "r", stdin);
    freopen(OUTPUT, "w", stdout);

    int N = 0;
    scanf("%d",&N);

    switch (N) {
        case 1:
            getPrimeArray(10);
        case 2:
            getPrimeArray(10 * 10);
        case 3:
            getPrimeArray(10 * 100);
        case 4:
            getPrimeArray(10 * 1000);
        case 5:
            getPrimeArray(10 * 10000);
//        default:
//            printf("N의 값이 이상합니다.");
//            printf("프로그램을 종료합니다.");
    }

    return 0;
}

void getPrimeArray(int N) {
    printf("%d\n",N);

//    int* returnArray = (int*)calloc(N, sizeof(int)); //동적할당
    int returnArray[100000] = {1,};
    for (int i = N/10+1; i < N; i++) {
        for (int j = 2; j <= sqrt(i) ; j++) {
            if (i % j == 0) returnArray[j]=0;
        }
    }

    for (int i = 0; i < N; i++)
        if(returnArray[i]==1)
            printf("%d\t",i);


//    free(returnArray); //메모리 해제
}
int power(int x, int y, int mod) {
    int res = 1;
    x %= mod;

    while (y) {
        if (y % 2) res = (res * x) % mod;
        y/=2;
        x = (x*x) % mod;
    }
    return res;

}

//if n is prime, return true
int miller(int n, int a){
    if(a % n == 0) return 0;
    int k = n-1;
    while(1) {
        int temp = power(a, k, n);
        if(temp == n-1) return 1; //a^k = -1 (mod n)
        if(k%2) return (temp == 1 || temp == n-1);
        k /= 2;
    }
}
